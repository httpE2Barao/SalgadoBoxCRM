generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  name               String?
  password           String
  role               UserRole             @default("STAFF")
  phone              String?
  avatar             String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  customerNotes      CustomerNote[]
  orderStatusHistory OrderStatusHistory[]
  orders             Order[]
  productionRecords  ProductionRecord[]
  restaurants        Restaurant[]         @relation("RestaurantOwner")
  sessions           Session[]
  stockMovements     StockMovement[]
  staffOf            Restaurant[]         @relation("RestaurantStaff")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Restaurant {
  id                String             @id @default(cuid())
  name              String
  description       String?
  logo              String?
  phone             String
  email             String?
  address           String?
  neighborhood      String?
  city              String?
  state             String?
  zipCode           String?
  latitude          Float?
  longitude         Float?
  timezone          String             @default("America/Sao_Paulo")
  currency          String             @default("BRL")
  status            RestaurantStatus   @default("ACTIVE")
  deliveryEnabled   Boolean            @default(true)
  takeawayEnabled   Boolean            @default(true)
  dineInEnabled     Boolean            @default(true)
  deliveryFee       Float              @default(0)
  minimumOrder      Float              @default(0)
  deliveryRadius    Float?
  openingHours      Json
  socialMedia       Json?
  paymentMethods    Json
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  ownerId           String
  analytics         Analytics[]
  categories        Category[]
  combos            Combo[]
  coupons           Coupon[]
  customers         Customer[]
  loyaltyPrograms   LoyaltyProgram[]
  orders            Order[]
  productionRecords ProductionRecord[]
  products          Product[]
  owner             User               @relation("RestaurantOwner", fields: [ownerId], references: [id])
  stockBatches      StockBatch[]
  stockMovements    StockMovement[]
  staff             User[]             @relation("RestaurantStaff")

  @@map("restaurants")
}

model Category {
  id           String     @id @default(cuid())
  name         String
  description  String?
  icon         String?
  color        String?
  displayOrder Int        @default(0)
  isActive     Boolean    @default(true)
  image        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  products     Product[]

  @@map("categories")
}

model Product {
  id                String             @id @default(cuid())
  name              String
  description       String?
  price             Float
  costPrice         Float?
  image             String?
  isActive          Boolean            @default(true)
  isAvailable       Boolean            @default(true)
  isFeatured        Boolean            @default(false)
  stock             Int                @default(0)
  minimumStock      Int                @default(0)
  preparationTime   Int?
  calories          Int?
  allergens         Json?
  nutritionalInfo   Json?
  tags              Json?
  spicyLevel        Int?               @default(0)
  isVegetarian      Boolean            @default(false)
  isVegan           Boolean            @default(false)
  isGlutenFree      Boolean            @default(false)
  displayOrder      Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  restaurantId      String
  categoryId        String?
  comboItems        ComboItem[]
  orderItems        OrderItem[]
  productOptions    ProductOption[]
  productionRecords ProductionRecord[]
  category          Category?          @relation(fields: [categoryId], references: [id])
  restaurant        Restaurant         @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  stockBatches      StockBatch[]
  stockMovements    StockMovement[]

  @@map("products")
}

model ProductOption {
  id           String            @id @default(cuid())
  name         String
  description  String?
  price        Float
  isActive     Boolean           @default(true)
  displayOrder Int               @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  productId    String
  orderItems   OrderItemOption[]
  product      Product           @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_options")
}

model Combo {
  id              String      @id @default(cuid())
  name            String
  description     String?
  price           Float
  originalPrice   Float?
  image           String?
  isActive        Boolean     @default(true)
  isAvailable     Boolean     @default(true)
  isFeatured      Boolean     @default(false)
  preparationTime Int?
  displayOrder    Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  restaurantId    String
  comboItems      ComboItem[]
  restaurant      Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]

  @@map("combos")
}

model ComboItem {
  id           String   @id @default(cuid())
  quantity     Int      @default(1)
  isOptional   Boolean  @default(false)
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  comboId      String
  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  combo        Combo    @relation(fields: [comboId], references: [id], onDelete: Cascade)

  @@unique([comboId, productId])
  @@map("combo_items")
}

model Customer {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  phone         String?        @unique
  avatar        String?
  birthDate     DateTime?
  notes         String?
  tags          Json?
  source        String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  restaurantId  String
  cashback      Cashback[]
  customerNotes CustomerNote[]
  restaurant    Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  loyaltyPoints LoyaltyPoint[]
  orders        Order[]

  @@map("customers")
}

model Order {
  id                  String               @id @default(cuid())
  orderNumber         String               @unique
  status              OrderStatus          @default("PENDING")
  type                OrderType            @default("DELIVERY")
  customerName        String
  customerPhone       String
  customerEmail       String?
  deliveryAddress     Json?
  subtotal            Float
  deliveryFee         Float                @default(0)
  discount            Float                @default(0)
  tax                 Float                @default(0)
  total               Float
  paymentMethod       String?
  paymentStatus       PaymentStatus        @default("PENDING")
  notes               String?
  estimatedTime       Int?
  preparationTime     Int?
  deliveryTime        Int?
  source              String?
  couponId            String?
  loyaltyPointsUsed   Int?                 @default(0)
  cashbackUsed        Float?               @default(0)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  completedAt         DateTime?
  restaurantId        String
  customerId          String?
  staffId             String?
  lalamoveOrderId     String?
  lalamoveTrackingUrl String?
  lalamoveDriverInfo  Json?
  deliveredAt         DateTime?
  cancellationReason  String?
  cashback            Cashback[]
  loyaltyPoints       LoyaltyPoint[]
  orderItems          OrderItem[]
  orderStatusHistory  OrderStatusHistory[]
  staff               User?                @relation(fields: [staffId], references: [id])
  customer            Customer?            @relation(fields: [customerId], references: [id])
  restaurant          Restaurant           @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  coupon              Coupon?              @relation(fields: [couponId], references: [id])

  @@map("orders")
}

model OrderItem {
  id               String            @id @default(cuid())
  quantity         Int
  price            Float
  notes            String?
  createdAt        DateTime          @default(now())
  orderId          String
  productId        String?
  comboId          String?
  orderItemOptions OrderItemOption[]
  combo            Combo?            @relation(fields: [comboId], references: [id])
  product          Product?          @relation(fields: [productId], references: [id])
  order            Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model OrderItemOption {
  id              String        @id @default(cuid())
  price           Float
  createdAt       DateTime      @default(now())
  orderItemId     String
  productOptionId String
  productOption   ProductOption @relation(fields: [productOptionId], references: [id])
  orderItem       OrderItem     @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@map("order_item_options")
}

model OrderStatusHistory {
  id        String      @id @default(cuid())
  status    OrderStatus
  notes     String?
  createdAt DateTime    @default(now())
  orderId   String
  staffId   String?
  staff     User?       @relation(fields: [staffId], references: [id])
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}

model Coupon {
  id                   String     @id @default(cuid())
  code                 String     @unique
  name                 String
  description          String?
  type                 CouponType
  value                Float
  minOrderValue        Float      @default(0)
  maxDiscount          Float?
  usageLimit           Int?
  usageCount           Int        @default(0)
  validFrom            DateTime?
  validTo              DateTime?
  isActive             Boolean    @default(true)
  isSingleUse          Boolean    @default(false)
  applicableProducts   Json?
  applicableCategories Json?
  customerSegment      String?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  restaurantId         String
  restaurant           Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders               Order[]

  @@map("coupons")
}

model LoyaltyProgram {
  id                String         @id @default(cuid())
  name              String
  description       String?
  pointsPerPurchase Float          @default(1)
  pointsValue       Float          @default(0.01)
  minOrderValue     Float          @default(0)
  isActive          Boolean        @default(true)
  validFrom         DateTime?
  validTo           DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  restaurantId      String
  loyaltyPoints     LoyaltyPoint[]
  restaurant        Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("loyalty_programs")
}

model LoyaltyPoint {
  id               String         @id @default(cuid())
  points           Int
  expiresAt        DateTime?
  createdAt        DateTime       @default(now())
  customerId       String
  loyaltyProgramId String
  orderId          String?
  order            Order?         @relation(fields: [orderId], references: [id])
  loyaltyProgram   LoyaltyProgram @relation(fields: [loyaltyProgramId], references: [id], onDelete: Cascade)
  customer         Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("loyalty_points")
}

model Cashback {
  id         String    @id @default(cuid())
  amount     Float
  percentage Float     @default(0)
  expiresAt  DateTime?
  isUsed     Boolean   @default(false)
  usedAt     DateTime?
  createdAt  DateTime  @default(now())
  customerId String
  orderId    String?
  order      Order?    @relation(fields: [orderId], references: [id])
  customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("cashback")
}

model CustomerNote {
  id         String   @id @default(cuid())
  note       String
  createdAt  DateTime @default(now())
  customerId String
  staffId    String
  staff      User     @relation(fields: [staffId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_notes")
}

model Analytics {
  id           String     @id @default(cuid())
  date         DateTime   @default(now())
  metrics      Json
  createdAt    DateTime   @default(now())
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([restaurantId, date])
  @@map("analytics")
}

model StockMovement {
  id                 String            @id @default(cuid())
  type               StockMovementType
  quantity           Int
  notes              String?
  reference          String?
  createdAt          DateTime          @default(now())
  restaurantId       String
  productId          String
  staffId            String?
  batchId            String?
  productionRecordId String?
  productionRecord   ProductionRecord? @relation(fields: [productionRecordId], references: [id])
  batch              StockBatch?       @relation(fields: [batchId], references: [id])
  staff              User?             @relation(fields: [staffId], references: [id])
  product            Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  restaurant         Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("stock_movements")
}

model StockBatch {
  id             String          @id @default(cuid())
  batchNumber    String          @unique
  quantity       Int
  unitCost       Float?
  expirationDate DateTime?
  notes          String?
  createdAt      DateTime        @default(now())
  restaurantId   String
  productId      String
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  restaurant     Restaurant      @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  stockMovements StockMovement[]

  @@map("stock_batches")
}

model ProductionRecord {
  id             String          @id @default(cuid())
  quantity       Int
  unitCost       Float?
  notes          String?
  createdAt      DateTime        @default(now())
  restaurantId   String
  productId      String
  staffId        String?
  staff          User?           @relation(fields: [staffId], references: [id])
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  restaurant     Restaurant      @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  stockMovements StockMovement[]

  @@map("production_records")
}

enum UserRole {
  OWNER
  MANAGER
  STAFF
}

enum RestaurantStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
  DRIVER_DISPATCHED
  DRIVER_DISPATCH_FAILED
}

enum OrderType {
  DELIVERY
  TAKEAWAY
  DINE_IN
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_DELIVERY
}

enum StockMovementType {
  ENTRY
  EXIT
  ADJUSTMENT
}
